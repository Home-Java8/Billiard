package com.game.testing.d3.pilone;import com.sun.j3d.utils.behaviors.mouse.MouseRotate;import com.sun.j3d.utils.geometry.Sphere;import com.sun.j3d.utils.universe.SimpleUniverse;import javax.media.j3d.*;import javax.swing.*;import javax.vecmath.Color3f;import javax.vecmath.Point3d;import javax.vecmath.Vector3d;import javax.vecmath.Vector3f;import java.awt.*;public class MaterialDemo {  public static void main(String[] args) {    new MaterialDemo();  }    public MaterialDemo() {        // Create the canvas to draw in, and initialize our SimpleUniverse    mCanvas = new Canvas3D(SimpleUniverse.getPreferredConfiguration());    mUniverse = new SimpleUniverse(mCanvas);        // Create a transform group to move the sphere 50 meters along the Z axis    Transform3D transform = new Transform3D();    transform.set(new Vector3d(0.0, 0.0, -50.0));    TransformGroup translationGroup = new TransformGroup(transform);        // Now we can use an empty rotation transform since it's a sphere    TransformGroup rotationGroup = new TransformGroup();        // Attach the rotation group to the translation group.  (Do the rotation after the translation)    translationGroup.addChild(rotationGroup);        // Add a new Sphere    Sphere sphere = new Sphere(5);    rotationGroup.addChild(sphere);        // Put all of this in a BranchGroup and add it to the scenegraph    BranchGroup branchGroup = new BranchGroup();    branchGroup.addChild(translationGroup);        // Create a MouseRotate Behavior    rotationGroup.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);    rotationGroup.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);        MouseRotate mouseRotate = new MouseRotate(rotationGroup);    mouseRotate.setSchedulingBounds(new BoundingSphere(new Point3d(0.0, 0.0, 0.0), Double.MAX_VALUE));    branchGroup.addChild(mouseRotate);    // Create a light source    AmbientLight         ambientLight = new AmbientLight(new Color3f(0.5f, 0.5f, 0.5f));    ambientLight.setInfluencingBounds(new BoundingSphere(new Point3d(0.0, 0.0, 0.0), Double.MAX_VALUE));    branchGroup.addChild(ambientLight);    DirectionalLight directionalLight = new DirectionalLight(new Color3f(1.0f, 1.0f, 1.0f), new Vector3f(-1.0f, -1.0f, -1.0f));    directionalLight.setInfluencingBounds(new BoundingSphere(new Point3d(0.0, 0.0, 0.0), Double.MAX_VALUE));    branchGroup.addChild(directionalLight);        // Create our material    Appearance appearance = new Appearance();    Color3f   sphereColor = new Color3f(0.25f, 0.25f, 1.0f);    Color3f         black = new Color3f(0.0f, 0.0f, 0.0f);    Color3f         white = new Color3f(1.0f, 1.0f, 1.0f);    appearance.setMaterial(new Material(sphereColor, black, sphereColor, white, 128.0f));    sphere.setAppearance(appearance);        // Compile our branch group and add it to the universe    branchGroup.compile();    mUniverse.addBranchGraph(branchGroup);        // Create a frame to display it and set the canvas as the center component    JFrame frame = new JFrame();    frame.setTitle("Material Demo");    frame.getContentPane().add(mUniverse.getCanvas(), BorderLayout.CENTER);    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    frame.setSize(300, 200);    frame.show();  }      private SimpleUniverse mUniverse;  private Canvas3D mCanvas;}