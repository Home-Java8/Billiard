                                                                               Как работает наследование
                                                                               =========================
http://habrahabr.ru/post/30444/
-------------------------------
> Именно так и пишут Гамма и др.: наследование является нарушением инкапсуляции.
> Правильный подход к данному вопросу — отделить интерфейс от реализации. Во многих современных языках для этого предусмотрен специальный синтаксис. В отсталых языках можно
  использовать хаки, например,...
> Что касается наследования классов, которое, как вы помните, нарушает инкапсуляцию — часто вместо наследования лучше использовать делегирование и композицию.

http://www.amse.ru/courses/oopjava/11.php
-----------------------------------------
> В Java (в отличие от некоторых других языков программирования) каждый класс, кроме Object, имеет ровно одного родителя. Такая политика позволяет избежать сложностей,
  связанных с зависимостями классов, но при этом создает некоторые неудобства.

http://idev.by/android/22629/
-----------------------------
> В силу отсутствия множественного наследования, к выбору между интерфейсом и абстрактным классом нужно относиться ответсвенно. Но это лишь одна из причин. Используя
  абстракный класс вы можете сделать вызов метода предка super и получать доступ к его protected полям, что может привести к нарушению инкапсуляции. Поэтому часто рекомендуют
  использовать вместо наследования композицию или делегирование. Но это рекомендации.
> Таким образом, если классы действительно должны находиться в одной иерархической ветви, то есть разделюят общую функциональность и данные, а так же связаны логически по
  типу «is a» — абстрактный класс уместен. Если же из общего у классов только интерфейс, то «это как бы намекает», что тут уместен интерфейс.

http://www.sql.ru/forum/926638/v-chem-raznica-mezhdu-abstraktnym-klassom-i-interfeysom
--------------------------------------------------------------------------------------
> ах да, у абстрактного класса может быть конструктор по умолчанию который не можем объявить абстрактным:) в отличии от интерфейса. Но ответ ожидали другой, что любой другой
  класс может реализовать сколь угодно интерфейсов, а ведь вопрос был задан в чем различие между абстрактным классом и интерфейсом при условии аналогичных сигнатур класса.
  Понятно, что если бы намекнули туда куда клонят, то ответ был бы очевиден, тогда не пришлось бы отвечать :)

http://info.javarush.ru/translation/2013/08/26/Множественное-наследование-в-Java-Сравнение-композиции-и-наследования-.html
--------------------------------------------------------------------------------------------------------------------------
> Множественное наследование – способность создавать классы с множеством классов — родителей. В отличии от других популярных объектно-ориентированных языков, вроде С++, язык
  Java — не поддерживает множественное наследование классов. Не поддерживает он его из-за вероятности столкнуться с «проблемой алмаза» и вместо этого предпочитает
  обеспечивать некий комплексный подход для его решения, используя лучшие варианты из тех, которыми мы можем достичь аналогичный результат наследования.
> Композиция как спасение
  Так что же делать, если мы хотим использовать функцию methodA() класса ClassA и methodB() класса ClassB в ClassС? Решением этого может стать композиция – переписанная
  версия ClassC реализующая оба метода классов ClassA и ClassB, также имеющая реализацию doSomething() для одного из объектов.

http://www.rsdn.ru/forum/java/2652049.flat
------------------------------------------
> "Конструкторы не относятся к категории методов и не наследуются". Арнольд, Гослинг, Холмс.

==============================================================================================================================================================================
> Наследование класса и создание екземпляра класса - это разные вещи:
  "Суперкласс" ......... это базовый класс
  "Подкласс" ........... это класс который наследуется и расширяет функционал "суперкласса", (класс-наследник)
  "Наследование" ....... это расширение функционала базового "суперкласса" в новом классе-наследнике на этапе его определения...
  "Екземпляр класса" ... это создание уже рабочего объекта от класса на этапе его объявления...
> Доступ к элементам класса можно получить:
  - и на этапе его определения (например: в "суперклассе" или в "классе-наследнике")...
  - и на этапе его объявления (уже от рабочего объекта "екземпляра класса" - по ссылке на доступ)...

> (Механизм) Наследование классов применяется в случае когда нужно либо переопределить метод базового класса либо объеденить другие методы с базовым классом...
> (Механизм) Наследование классов для конструктора-класса НЕприменяется (конструкторы НЕотносятся к категории методов и НЕмогут быть унаследованы)
> У класса-наследника может быть только один класс-родитель (от которого он наследуется)
> Доступ к методу/конструктору/полю базового класса выполняется через (оператор) "super"
> (В отличии от других объектно-ориентированных языков) Java НЕподдерживает множественное наследование из-за вероятности столкнуться с «проблемой алмаза» и вместо этого
  предпочитает обеспечивать некий комплексный подход для его решения: "делегированием" и "композицией"
> Разница между "делегированием" и "композицией":
  - "Делегирование" ... это когда в классе создается экземпляр другого класса, и вызываются методы;
  - "Композиция" ...... это когда в одном классе создается экземпляр другого и динамически могут меняться поля в экземпляре другого класса;

> "Абстрактный класс" ... (это каркас) похож на обычный класс в котором есть хотябы один абстраутный метод
  "Абстрактный класс" удобно применять когда есть один или несколько специальных методов в базовом классе-родителе для которых сложно предугадать их определение...
> Только обычные методы внутри "Абстрактного класса" могут быть абстрактными, кроме конструкторов.
  Запрещено создавать экземпляры "Абстрактного класса", но можно определять конструкторы внутри абстрактного родительского-класса и использовать их в классе-наследнике (через оператор
  "super")
> "Интерфейс" ... это очень абстрактный класс и основное его применение для множественного наследования
  Интерфейсы (вообще) НЕмогут иметь конструктор и для описания методов-поведения сущности-объекта-класса...