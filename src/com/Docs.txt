(java наследование public protected)
* (Внутренний protected класс и наследование.Странное поведение) http://javatalks.ru/topics/3026
* (Java / Модификаторы доступа (области видимости)) http://www.quizful.net/interview/java/access-modifiers
  (Введение в Java-программирование: Часть 2. Конструкции реальных приложений *** Конструкторы и наследование) http://www.ibm.com/developerworks/ru/edu/j-introtojava2/section5.html
  (Какие виды наследования есть в Java. В чем между ними разница?) http://otvety.google.ru/otvety/thread?tid=6037f519fbb93f53
                                                                   http://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D0%BC_%28%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%29
                                                                   http://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2
  (Абсолютная загадка наследования в Java) http://habrahabr.ru/post/62602/

Механизм наследования распространяется только на методы классов (для полей и конструкторов класса эти правила недействуют).
  Основная идея наследования заключается в том чтобы расширить возможности класса-наследника при условии что в объекте экземпляра класса-наследника уже можно использовать эти методы
(без всякого предопределения...).
  Бывают случаи когда невозможно ранее предугадать реализацию метода в классах-наследниках - поэтой причине такие методы объявляются абстрактными в базовом-классе, а сам такой базовый
класс является абстрактным классом.
В целом абстрактный класс похож на обычный класс, за исключением абстрактных методов (которые могут быть только protected или public)
Кнструктор в абстрактном классе незапрещено определять, но основным условием при работе с абстрактным классом - это обизательно использовать только в классах наследниках...
  Интерфейс - это полностью абстрактный класс (в котором все методы абстрактные). Методы интерфейса могут быть объявлены только как public.
Интерфейс гарантирует что все его методы будут присутствовать в классе-наследнике. В случаях когда невозможно ранее предугадать реализацию метода в классах-наследниках, но мы точно
уже знаем конкретные опепрацыи которые хотим реализовать - в этом случае можно использовать тип интерфейса. Интерфейсы могут иметь только статические поля (и без конструкторов).
Но обычно интерфейсы применяются для множественного наследования в Java.

В чистом виде механизм наследования расчитан (используются) для неабстрактных классов и для неинтерфейсов.
"Полиморфизм" нарушает эти законы наследования.
  Обычно в классах (кроме методов и стандартных типов данных) используются и другие-сложные типы объектов-классов. То есть, программный код ожидает что используемый сложный тип
объекта-класса поддерживает конкретно-определеные методы с которыми он нужно работать... Достоинством полиморфизма для объектно-ориентированного программирования в том что даже в
случае когда невозможно ранее предугатать реализация метода, но - всегда можно расчитывать на поддержку наличия этих методов!
  Обычно библиотечные классы разрабатываются в рамках одного пакета. Каждый отдельный пакет содержит спецыфические библиотечные классы, которые реализуют конкретную функциональность...
Если использовать модификатор "protected" только в рамках одного пакета, - это позволяет получить доступ и видеть внутри класса методы других классов...
(Но уже за пределами пакета - доступ к методам других классов будет закрыт)


* (Полиморфизм в Java) http://hashcode.ru/questions/279518/%D0%BF%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D0%BC-%D0%B2-java
  (7: Полиморфизм) http://www.ccfit.nsu.ru/~deviv/courses/oop/tij2nd/Chapter07.html
  (Полиморфизм в Java) http://oop-java.blogspot.com/2005/12/java.html