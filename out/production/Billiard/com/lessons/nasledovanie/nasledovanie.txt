(java наследование public protected)
* (Внутренний protected класс и наследование.Странное поведение) http://javatalks.ru/topics/3026
* (Java / Модификаторы доступа (области видимости)) http://www.quizful.net/interview/java/access-modifiers
  (Введение в Java-программирование: Часть 2. Конструкции реальных приложений *** Конструкторы и наследование) http://www.ibm.com/developerworks/ru/edu/j-introtojava2/section5.html
  (Какие виды наследования есть в Java. В чем между ними разница?) http://otvety.google.ru/otvety/thread?tid=6037f519fbb93f53
                                                                   http://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D0%BC_%28%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%29
                                                                   http://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2
  (Абсолютная загадка наследования в Java) http://habrahabr.ru/post/62602/

Механизм наследования распространяется только на методы классов (для полей и конструкторов класса эти правила недействуют).
  Основная идея наследования заключается в том чтобы расширить возможности класса-наследника при условии что в объекте экземпляра класса-наследника уже можно использовать эти методы
(без всякого предопределения...).
  Бывают случаи когда невозможно ранее предугадать реализацию метода в классах-наследниках - поэтой причине такие методы объявляются абстрактными в базовом-классе, а сам такой базовый
класс является абстрактным классом.
В целом абстрактный класс похож на обычный класс, за исключением абстрактных методов (которые могут быть только protected или public)
Кнструктор в абстрактном классе незапрещено определять, но основным условием при работе с абстрактным классом - это обизательно использовать только в классах наследниках...
  Интерфейс - это полностью абстрактный класс (в котором все методы абстрактные). Методы интерфейса могут быть объявлены только как public.
Интерфейс гарантирует что все его методы будут присутствовать в классе-наследнике. В случаях когда невозможно ранее предугадать реализацию метода в классах-наследниках, но мы точно
уже знаем конкретные опепрацыи которые хотим реализовать - в этом случае можно использовать тип интерфейса. Интерфейсы могут иметь только статические поля (и без конструкторов).
Но обычно интерфейсы применяются для множественного наследования в Java.

В чистом виде механизм наследования расчитан (используются) для неабстрактных классов и для неинтерфейсов.
"Полиморфизм" нарушает эти законы наследования.
  Обычно в классах (кроме методов и стандартных типов данных) используются и другие-сложные типы объектов-классов. То есть, программный код ожидает что используемый сложный тип
объекта-класса поддерживает конкретно-определеные методы с которыми он нужно работать... Достоинством полиморфизма для объектно-ориентированного программирования в том что даже в
случае когда невозможно ранее предугатать реализация метода, но - всегда можно расчитывать на поддержку наличия этих методов!
  Обычно библиотечные классы разрабатываются в рамках одного пакета. Каждый отдельный пакет содержит спецыфические библиотечные классы, которые реализуют конкретную функциональность...
Если использовать модификатор "protected" только в рамках одного пакета, - это позволяет получить доступ и видеть внутри класса методы других классов...
(Но уже за пределами пакета - доступ к методам других классов будет закрыт)


Например, когда нужно построить иерархическую (древовидную) структуру классов - в этом случае происходит следующее:
-------------------------------------------------------------------------------------------------------------------
1) В чистом виде механизм наследования используется для того чтобы сократить код-разработчика (то есть, изначально класс-наследник уже получает функционал своего родителя)
   * существует корневой родительский-класс - фигура типа 'Точка';
   * от нее (фигуры типа 'Точка') строим класс-наследник - фигура типа 'Линия';
   * а от нее (фигуры типа 'Линия') строим классы-наследникы - фигуры типа 'Квадрат', 'Треугольник', 'Ромб', 'Круг', ...;
1) Работа с интерфейсами (виртуальные функции - полиморфизм)...
   * каждый следующий интерфейс-наследник добавляет новый функционал своего родительского интерфейса-наследника

* (Полиморфизм в Java) http://hashcode.ru/questions/279518/%D0%BF%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D0%BC-%D0%B2-java
  (7: Полиморфизм) http://www.ccfit.nsu.ru/~deviv/courses/oop/tij2nd/Chapter07.html
  (Полиморфизм в Java) http://oop-java.blogspot.com/2005/12/java.html



===================================================================================================================
Программное обеспечение (ПО) которое разрабатывается можно разделить на 3-и категории:
1. Продакшин ПО - это готовые решения коммерческих программ разрабатываемые для заказчика (клиент который пользуется этим ничего не знает о том как эта
   программа устроена)...
   * в этом случае разработчики собирают и объеденяют отдельные программные модули (сворачивают иерархическую структуру) в единный класс, который и запускает все эти программные компонеты.
     В результате такой единный класс получается громоздким и имеет многозадачную функциональность
2. (клиентское) API - это сервисное ПО - готовые решения коммерческих программ разрабатываемые только для заказчика (который пользуется этим сервисом и нетратит
   дополнительных рессурсов для хранения ценной информации)... По своей сути такое сервисное ПО очень похоже к Продакшин ПО, но имеет функциональное ограничения и экономит рессурсы...
   * В результате все сводится к тому, что получаем единый громоздкий API-класс (API-библиотеку), которая имеет множество разных функциональных возможностей
3. Инструментальное ПО - это бесплатные (с открытым кодом) библиотечные классы, которые не имеют никакой ценности и используются для разработки Продакшин ПО
   (для заказчиков)...
   * (а здесь все наоборот) для разработчиков ПО удобно работать с такими библиотечными классами каждый из которых будет иметь небольшой и простой функционал (заточеный для выполнения
      конкретно одной операции). В результате такая иерархическая структура классов разворачивается (в древовидную схему)

То есть:
* если при разработке (инструментальных) библиотечных классов - иерархическая структура разворачивается в древовидную схему;
* тогда при разработке продакшин/сервисного ПО - иерархическая структура наоборот сворачивает свою древовидную схему;

===================================================================================================================
                                                  Типы данных (в Java)
                                        http://www.znannya.org/?view=jc-data-types
                                                 ----------------------
  ТИПЫ ДАННЫХ - это конкретный размер области в оперативной памяти который выделяется под хранения данных
В Java типы данных делятся на 2-группы:
1. "Примитивные типы" бывают:
   a) "Целочисленые" (byte, short, int, long, char)
   b) "Дробные" (float, double)
   c) "Булевые" (boolean)
2. "Ссылочные типы" (объекты/классы)

  Определение типов в программировании нужно для того чтобы гарантированно сохранить целостность данных (для которых выделяется
размер области в оперативной памяти)
  А также данные в программах подвергаются обработке различными операциями: математическими, строковыми, ...
Например: если перемножить/делить строковые типы данных - это приведет к ошибке, точно также невозможно выполнить контенацию
(склеивание) чисел - это ошибка...

  ПЕРЕМЕННЫЕ - это есть именнованые ссылки на те данные которые храняться в области оперативной памяти
Важно: тип переменной должен совпадать с типом данных (инначе это приведет к ошибкам...)
Компилятор языка программирования делает предварительную проверку на совместимость типов чтобы гарантировать корректность
выполнения комманд в программном коде.

  ПРИВЕДЕНИЯ ТИПОВ - это принудительное изменения типа в программе с учетом вероятной частичной утери данных.
Приведения типов полезно применять в случаях когда ранее невозможно предугадать поведения модуля программы. Приведения типов
является сложной операцией на которую наложены ряд ограничений.
  Каждый объект может являться наследником своего родительского класса. Часто в момент создания экземпляра класса бывает так
что конечный класс может быть несколько раз унаследован, то есть, - иметь несколько своих родителей предков..., которые также
имеют собственные поля и методы.
  В момент создания экземпляра класса ("new") происходит много интересных операций согласно законам наследования,полиморфизма
и инкапсуляции:
- в итоге, в области оперативной памяти, создаются несколько объектов, которые связаны между собой по структуре наследования
  классов
- каждый из этих объектов (в области оперативной памяти) будут иметь собственные поля которые были определены в классе
- но по правилам механизма наследования все функции/методы будут подвержаны полиморфизму и инкапсуляции...
Поэтому компилятор языка программирования выполнит поиск по структуре наследования и найдет тот объект который будет
соответствовать типу переменной. В результате:
* "поля" класса будут принадлежать именно только этому типу объекта
* а все "методы" класса будут подвержаны законам полиморфизму и инкапсуляции создаваемого объекта
  То есть, приведения типов возможно только в том случае если классы-наследники принадлежат одной структуре наследования, и
только в случае если приводимый тип располагается в структуре ниже конечного типа объекта



(java дженерики)
* http://habrahabr.ru/post/196806/
  http://hashcode.ru/questions/264255/java-generic-%D0%B8-%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D1%8B
  http://javist.ru/kak-ispolzovat-dzheneriki/
  http://hashcode.ru/questions/9897/java-%D0%B4%D0%B6%D0%B5%D0%BD%D0%B5%D1%80%D0%B8%D0%BA%D0%B8-%D0%B8-%D1%81%D0%B2%D1%8F%D0%B7%D1%8C-%D1%82%D0%B8%D0%BF%D0%BE%D0%B2

(дженерики java пример)
  http://ru-java.livejournal.com/1126736.html?thread=16646992
  http://src-code.net/dzheneriki-v-java-dlya-android/
* http://vresheno.ru/122962-how-do-i-resolve-ambiguous-methods-caused-by-intersection-types-in-java-generics

. http://developer.alexanderklimov.ru/android/java/arraylist.php
. http://www.k-press.ru/cs/2008/3/generic/generic.asp
. http://subscribe.ru/archive/comp.soft.prog.javalessons/200704/30131706.html/
