
  Язык программиолвания Java построен на концепциях:
- Наследование
- Полиморфизм
- Перегрузка
- Инкапсуляция
это значит что в момент создания экземпляра класса в Java к объекту и его членам будут применены все эти механизмы...:
1. все члены базового класса будут наследоваться в классах потомках
2. в случае когда присутствуют дублирующие методы - к ним будут применены законы полиморфизма (кроме полей и конструкторов)
3. в противном же случае если методы частично дублируются - к ним будут применены законы перегрузки (кроме полей и конструкторов)


   Отличительной особеностью языка программирования Java среди других объектно-ориентированных языков программирования, - есть тот факт что все объекты/классы (кроме примитивных)
являются предком базового объекта.
   Одной из особенностью Java также есть операция объявления-иннициализации переменных. Java компилятор является умным инструментом и умеет делать мноие вещи интуитивно...
Например, такая простая операция как создание переменной выполняется в несколько шагов:
1. Объявления ссылки-переменной объект;
2. Определение (присвоение) объекта (включая размер, если это массив, итп.) для переменной;
3. Иннициализация данными этого элементов объект;
Дело в том что умный Java компилятор все эти 3-шага может выполнить за 1-раз, - такая операция называется объявление + иннициализация переменной ("=").
   Конструктор(ы) класса - служит для именно того чтобы иннициализировать объект в момент создания его экземпляра класса.
   А хитрый оператор "new" - служит чтобы создавать экземпляры класса.
   Оператор "extends" - ссылается на класс своего предка. Иммено с использованием такой ссылочной связи между объектами в языке программирования работают законы: наследование,
полиморфизма, инкапсуляция, ...
   Базовым механизмом в Java заложены законы наследование. Любой класс в Java можно наследовать или может быть унаследованым (это базовый закон который заложен в основу Java).
То есть, при разработке иерархической структуры классов-наследников, на первом этапе к ним будет применен закон наследования.
И только уже на следующих-остальных этапах к классам-наследникам будут применены все остальные законы: полиморфизм, инкапсуляция.
(кроме этого, существуют и другие законы, например: приведения типов...)

  Умный Java-компилятор на момент создания экземпляра класса (при объявлении + иннициализации переменной) может интуитивно выполнить все эти операции:
- иннициализация полей для всех связанных классов в иерархической структуре (включая и родительские классы)...
- применить законы наследования-полиморфизма-инкапсуляции
- создать экземпляр класса
- выполнить приведение типов (если это будет необходимо)


   Метод плагина - это такой подход, который позволяет разрабатывать независимые модули для конкретного программного продукта.
Например драйвер базы данных:
- Существует некий менеджер баз, который умеет только оперировать между разными базами...
- (менеджер баз ничего незнает о том как устроена база внутри) существует некий движок хранения данных "InnoDB", "MyISAM", который предназначен для выполнения транзакций к базе на
  уровне файловой системы
Когда клиент отправляет транзакцию к базе - такая транзакция обрабатывается разными-независимыми модулями на стороне сервера.
То есть, идея плагина в том, что он ничего незнает о том как устроена серверная часть. Существуют общеприйнятые правила построения транзакций, которые одинаково должны работать на
разных серверах. Меняется только адресс сервера.